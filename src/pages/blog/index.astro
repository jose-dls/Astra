---
import BaseHead from "../../components/BaseHead.astro";
import Header from "../../components/Header.astro";
import Footer from "../../components/Footer.astro";
import { SITE_TITLE, SITE_DESCRIPTION } from "../../consts";
import { getCollection } from "astro:content";
import FormattedDate from "../../components/FormattedDate.astro";
import BaseBody from "../../layouts/BaseBody.astro";
import FadeMove from "@/components/anim/FadeMove.astro";
import FadeIn from "@/components/anim/FadeIn.astro";

const formatTag = (tag: string) => {
	return tag
		.toLowerCase()
		.split(" ")
		.map((word) => word.charAt(0)?.toUpperCase() + word.slice(1))
		.join(" ");
};

const posts = (await getCollection("blog")).sort(
	(a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf(),
);
const tagCounts: Record<string, number> = {};
const uniqueTags = new Set<string>();
posts.forEach((post) => {
	(post.data.tags || []).forEach((tag) => {
		const normalizedTag = tag?.toLowerCase();
		tagCounts[normalizedTag] = (tagCounts[normalizedTag] || 0) + 1;
		uniqueTags.add(normalizedTag);
	});
});
const sortedTags = Object.entries(tagCounts).sort((a, b) => b[1] - a[1]);
---

<!doctype html>
<html lang="en">
	<head>
		<BaseHead title={SITE_TITLE} description={SITE_DESCRIPTION} />
		<script>
			// Configuration for pagination
			const postsPerPage = 4; // Adjust this value to set how many posts per page
			let currentPage = 1;

			// Function to paginate posts
			function paginatePosts() {
				const allPosts = document.querySelectorAll(".post-item");
				let taggedPosts: Element[] = [];
				allPosts.forEach((post) => {
					const postTags =
						(post as HTMLElement).dataset.tags
							?.toLowerCase()
							.split(",/,") || [];

					// Show post based on filter mode
					const shouldShow =
						selectedTags.size === 0 ||
						(useUnion
							? Array.from(selectedTags).some((tag) =>
									postTags.includes(tag.toLowerCase()),
								) // OR
							: Array.from(selectedTags).every((tag) =>
									postTags.includes(tag.toLowerCase()),
								)); // AND

					if (shouldShow) {
						taggedPosts.push(post);
					}
				});
				const totalPosts = taggedPosts.length;
				const totalPages = Math.ceil(totalPosts / postsPerPage);

				// Hide all posts
				taggedPosts.forEach(
					(post) => ((post as HTMLElement).style.display = "none"),
				);

				// Show posts for the current page
				const startIdx = (currentPage - 1) * postsPerPage;
				const endIdx = Math.min(startIdx + postsPerPage, totalPosts);
				for (let i = startIdx; i < endIdx; i++) {
					(taggedPosts[i] as HTMLElement).style.display = "block";
				}

				// Update pagination controls
				updatePaginationControls(totalPages);
			}

			// Function to update the pagination controls (next/previous buttons)
			function updatePaginationControls(totalPages: number) {
				const prevBtn = document.querySelector(".pagination-prev");
				const nextBtn = document.querySelector(".pagination-next");
				const pageNumbersContainer = document.querySelector(
					".pagination-numbers",
				);

				// Enable/disable buttons based on current page
				(prevBtn as HTMLButtonElement).disabled = currentPage === 1;
				(nextBtn as HTMLButtonElement).disabled =
					currentPage === totalPages;

				// Clear existing page numbers
				if (pageNumbersContainer) {
					pageNumbersContainer.innerHTML = "";
				}

				// Generate page number buttons
				for (let i = 1; i <= totalPages; i++) {
					const pageBtn = document.createElement("button");
					pageBtn.textContent = i.toString();
					pageBtn.classList.add("pagination-btn", "cursor-pointer");
					pageBtn.onclick = () => {
						currentPage = i;
						paginatePosts();
					};
					if (i === currentPage) {
						pageBtn.classList.add(
							"text-lm-accent",
							"dark:text-dm-accent",
							"underline",
							"underline-offset-3",
						);
					}
					if (pageNumbersContainer) {
						pageNumbersContainer.appendChild(pageBtn);
					}
				}
			}

			// Event listeners for previous and next buttons
			const pBtns = document.querySelector(".pagination-prev");
			if (pBtns) {
				(pBtns as HTMLButtonElement).onclick = () => {
					if (currentPage > 1) {
						currentPage--;
						paginatePosts();
					}
				};
			}

			const nBtns = document.querySelector(".pagination-next");
			if (nBtns) {
				(nBtns as HTMLButtonElement).onclick = () => {
					const totalPosts =
						document.querySelectorAll(".post-item").length;
					const totalPages = Math.ceil(totalPosts / postsPerPage);
					if (currentPage < totalPages) {
						currentPage++;
						paginatePosts();
					}
				};
			}

			// Initialize pagination on page load
			window.onload = paginatePosts;
			declare global {
				interface Window {
					filterPosts: (tag: string) => void;
					toggleFilterMode: () => void;
				}
			}
			let selectedTags = new Set<string>();
			let useUnion = false; // false = intersection (AND), true = union (OR)

			function formatTag(tag: string): string {
				return tag
					.toLowerCase()
					.split(" ")
					.map(
						(word) => word.charAt(0)?.toUpperCase() + word.slice(1),
					)
					.join(" ");
			}

			window.toggleFilterMode = function () {
				useUnion = !useUnion;
				const toggleBtn = document.querySelectorAll(
					".filter-mode-toggle",
				);
				if (toggleBtn) {
					toggleBtn.forEach((btn) => {
						btn.textContent = useUnion ? "OR" : "AND";
					});
				}
				// Update the filter without re-applying all tags
				const posts = document.querySelectorAll(".post-item");
				posts.forEach((post) => {
					const postTags =
						(post as HTMLElement).dataset.tags
							?.toLowerCase()
							.split(",/,") || [];

					const shouldShow =
						selectedTags.size === 0 ||
						(useUnion
							? Array.from(selectedTags).some((tag) =>
									postTags.includes(tag.toLowerCase()),
								)
							: Array.from(selectedTags).every((tag) =>
									postTags.includes(tag.toLowerCase()),
								));

					(post as HTMLElement).style.display = shouldShow
						? "block"
						: "none";
				});
				currentPage = 1;
				paginatePosts();
			};

			window.filterPosts = function (tag: string) {
				if (!tag) return;

				tag = tag.toLowerCase();

				// Toggle tag selection
				if (selectedTags.has(tag)) {
					selectedTags.delete(tag.toLowerCase());
				} else {
					selectedTags.add(tag.toLowerCase());
				}

				// Update checkbox state
				const checkbox = document.querySelectorAll(
					`input[onchange="filterPosts('${tag}')"]`,
				);
				if (checkbox) {
					checkbox.forEach((cb) => {
						(cb as HTMLInputElement).checked = selectedTags.has(
							tag.toLowerCase(),
						);
					});
				}

				// Update active tags display
				const activeTagsEl = document.querySelector(".active-tags");
				if (activeTagsEl) {
					activeTagsEl.innerHTML =
						selectedTags.size > 0
							? `<p>Active Tags:</p> ${Array.from(selectedTags)
									.map(
										(t) =>
											`<button
												class="inline-flex items-center rounded-md bg-lm-bg dark:bg-dm-bg outline-1 font-medium text-sm px-3 py-1 cursor-pointer hover:opacity-50 focus:outline-none transition duration-150 ease-in-out"
												onclick="filterPosts('${t.toLowerCase()}')"
											>
												<span class="mr-2">
													<svg class="h-4 w-4 fill-current" viewBox="0 0 20 20"><path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd"></path></svg>
												</span>
												${formatTag(t)}
											</button>`,
									)
									.join(" ")}`
							: "";
				}

				// Update button styles
				document.querySelectorAll(".tag-btn-post").forEach((btn) => {
					const btnTag = (btn as HTMLElement).dataset.tag;
					if (selectedTags.has(btnTag!)) {
						btn.classList.add(
							"bg-lm-txt",
							"text-lm-bg",
							"dark:bg-dm-txt",
							"dark:text-dm-bg",
							"font-bold",
						);
						btn.classList.remove("bg-lm-bg", "dark:bg-dm-bg");
					} else {
						btn.classList.remove(
							"bg-lm-txt",
							"text-lm-bg",
							"dark:bg-dm-txt",
							"dark:text-dm-bg",
							"font-bold",
						);
						btn.classList.add("bg-lm-bg", "dark:bg-dm-bg");
					}
				});

				const posts = document.querySelectorAll(".post-item");
				posts.forEach((post) => {
					const postTags =
						(post as HTMLElement).dataset.tags
							?.toLowerCase()
							.split(",/,") || [];

					// Show post based on filter mode
					const shouldShow =
						selectedTags.size === 0 ||
						(useUnion
							? Array.from(selectedTags).some((tag) =>
									postTags.includes(tag.toLowerCase()),
								) // OR
							: Array.from(selectedTags).every((tag) =>
									postTags.includes(tag.toLowerCase()),
								)); // AND

					(post as HTMLElement).style.display = shouldShow
						? "block"
						: "none";
				});
				currentPage = 1;
				paginatePosts();
			};
		</script>
		<style>
			.pagination-prev[disabled],
			.pagination-next[disabled] {
				cursor: not-allowed;
				opacity: 0.5;
			}
		</style>
	</head>

	<BaseBody>
		<Header />
		<main class="grow flex-1 h-fit w-[90vw]">
			<section class="h-fit flex flex-col">
				<section
					class="container-title bg-lm-2 dark:bg-dm-2 flex flex-col items-center h-fit m-10"
				>
					<div class="flex flex-col items-center w-full gap-5">
						<FadeMove direction="down">
							<h1 class="text-3xl font-bold">Blog Posts</h1>
						</FadeMove>
						<h2
							class="active-tags w-7/10 min-h-10 flex flex-row flex-wrap gap-2 items-center justify-center"
						>
						</h2>
					</div>
				</section>
				<FadeIn>
					<div
						class="mb-10 posts-section flex flex-row justify-center flex-wrap lg:flex-nowrap"
					>
						<!-- Tags Filter Mobile -->
						 <FadeMove direction="down" class="w-full h-fit block lg:hidden">
							<aside
							class="mb-10 tags w-full h-fit bg-lm-2 dark:bg-dm-2 block lg:hidden"
						>
							<div
								class="pb-5 flex flex-row justify-between items-center flex-wrap cursor-pointer"
								onclick="toggleTags()"
							>
								<h2
									class="text-2xl font-bold flex flex-row items-center gap-2"
								>
									<span class="toggleTagsButton">
										<svg
											xmlns="http://www.w3.org/2000/svg"
											fill="none"
											viewBox="0 0 24 24"
											stroke-width="1.5"
											stroke="currentColor"
											class="size-6"
										>
											<path
												stroke-linecap="round"
												stroke-linejoin="round"
												d="m19.5 8.25-7.5 7.5-7.5-7.5"
											></path>
										</svg>
									</span>
									<p>Tags</p>
								</h2>
								<div class="flex flex-row items-center gap-2">
									<span class="text-sm">Filter Mode:</span>
									<button
										class="filter-mode-toggle px-3 py-1 rounded-full outline-1 text-sm font-bold"
										onclick="toggleFilterMode()"
									>
										AND
									</button>
								</div>
							</div>

							<ul class="tagList flex flex-col gap-2 mt-3 hidden">
								{
									sortedTags.map(([tag, count]) => (
										<li class="inline-block">
											<label class="flex flex-row items-center gap-2 cursor-pointer">
												<input
													type="checkbox"
													class="m-w-4 m-h-4"
													onchange={`filterPosts('${tag.toLowerCase()}')`}
												/>
												<span class="tag-btn hover:text-lm-accent dark:hover:text-dm-accent text-wrap break-all">
													{formatTag(tag)} ({count})
												</span>
											</label>
										</li>
									))
								}
							</ul>
						</aside>
						 </FadeMove>
						<!-- Posts -->
						<FadeMove direction="right" class="h-full lg:w-7/10">
							<article class="container-posts">
								<ul
									class="grid gap-5 grid-cols-1 lg:grid-cols-2"
									id="postList"
								>
									{
										posts.map((post) => (
											<li
												class="post-item"
												data-tags={
													post?.data?.tags
														?.join(",/,")
														.toLowerCase() || ""
												}
											>
												<a
													href={`/blog/${post.id}/`}
													class="flex flex-col justify-center gap-2"
												>
													<img
														width={720}
														height={360}
														src={
															post.data.heroImage
														}
														alt=""
														class="w-full outline-solid outline-1 flex flex-col items-center justify-center rounded-lg p-3"
													/>
													<h4 class="title">
														{post.data.title}
													</h4>
													<p class="date">
														<FormattedDate
															date={
																post.data
																	.pubDate
															}
														/>
														{post.data.updatedDate && (
															<>
															 | Last Updated: <FormattedDate date={post.data.updatedDate} />
															</>
														)}
													</p>
												</a>
												<ul class="tags flex flex-row flex-wrap gap-2 mt-2">
													{post.data.tags &&
													post.data.tags.length >
														0 ? (
														post.data.tags.map(
															(tag) => (
																<li>
																	<button
																		class="tag-btn-post cursor-pointer hover:text-lm-accent dark:hover:text-dm-accent bg-lm-bg dark:bg-dm-bg outline-1 inline-flex items-center rounded-md font-medium text-sm px-3 py-1 hover:opacity-50 focus:outline-none transition duration-150 ease-in-out"
																		data-tag={tag.toLowerCase()}
																		onclick={`filterPosts('${tag.toLowerCase()}')`}
																	>
																		{formatTag(
																			tag,
																		)}
																	</button>
																</li>
															),
														)
													) : (
														<li>
															<br />
														</li>
													)}
												</ul>
											</li>
										))
									}
								</ul>
								<div
									class="pagination-controls flex justify-center gap-5 mt-10"
								>
									<button
										class="pagination-prev px-4 py-2 bg-lm-2 dark:bg-dm-2 rounded-l-md cursor-pointer outline-1"
										disabled
									>
										Previous
									</button>
									<div class="pagination-numbers flex gap-2">
										<!-- Page number buttons will be injected here -->
									</div>
									<button
										class="pagination-next px-4 py-2 bg-lm-2 dark:bg-dm-2 rounded-r-md cursor-pointer outline-1"
										disabled
									>
										Next
									</button>
								</div>
							</article>
						</FadeMove>
						<!-- Tags Filter Desktop -->
						<FadeMove direction="left" class="w-3/10 h-fit hidden lg:block">
							<aside
								class="p-10 mx-10 tags h-fit bg-lm-2 dark:bg-dm-2 hidden lg:block"
							>
								<div
									class="pb-5 flex flex-row justify-between items-center flex-wrap gap-5"
								>
									<h2
										class="text-2xl font-bold flex flex-row items-center gap-2 cursor-pointer"
										onclick="toggleTags()"
									>
										<span class="toggleTagsButton">
											<svg
												xmlns="http://www.w3.org/2000/svg"
												fill="none"
												viewBox="0 0 24 24"
												stroke-width="1.5"
												stroke="currentColor"
												class="size-6"
											>
												<path
													stroke-linecap="round"
													stroke-linejoin="round"
													d="m19.5 8.25-7.5 7.5-7.5-7.5"
												></path>
											</svg>
										</span>
										<p>Tags</p>
									</h2>
									<div
										class="flex flex-row items-center gap-2"
									>
										<span class="text-sm">Filter Mode:</span
										>
										<button
											class="filter-mode-toggle px-3 py-1 rounded-full outline-1 text-sm font-bold cursor-pointer"
											onclick="toggleFilterMode()"
										>
											AND
										</button>
									</div>
								</div>

								<ul
									class="tagList flex flex-col gap-2 mt-3 hidden"
								>
									{
										sortedTags.map(([tag, count]) => (
											<li class="inline-block">
												<label class="flex flex-row items-center gap-2 cursor-pointer">
													<input
														type="checkbox"
														class="m-w-4 m-h-4 accent-lm-2 dark:accent-dm-2 border-2 border-lm-txt dark:border-dm-txt"
														onchange={`filterPosts('${tag.toLowerCase()}')`}
													/>
													<span class="tag-btn hover:text-lm-accent dark:hover:text-dm-accent text-wrap break-all">
														{formatTag(tag)} (
														{count})
													</span>
												</label>
											</li>
										))
									}
								</ul>
							</aside>
							<script>
								declare global {
									interface Window {
										toggleTags: () => void;
									}
								}
								window.toggleTags = function () {
									const tagList =
										document.getElementsByClassName(
											"tagList",
										);
									const toggleButton =
										document.getElementsByClassName(
											"toggleTagsButton",
										);

									if (tagList) {
										// Toggle the visibility of the tag list
										Array.from(tagList).forEach(
											(element) => {
												element.classList.toggle(
													"hidden",
												);
											},
										);

										// Change the button text based on visibility
										if (
											tagList[0].classList.contains(
												"hidden",
											)
										) {
											if (toggleButton) {
												Array.from(
													toggleButton,
												).forEach((button) => {
													button.innerHTML = `
												<svg
													xmlns="http://www.w3.org/2000/svg"
													fill="none"
													viewBox="0 0 24 24"
													stroke-width="1.5"
													stroke="currentColor"
													class="size-6"
												>
													<path
														stroke-linecap="round"
														stroke-linejoin="round"
														d="m19.5 8.25-7.5 7.5-7.5-7.5"
													/>
												</svg>
												`;
												});
											}
										} else {
											if (toggleButton) {
												Array.from(
													toggleButton,
												).forEach((button) => {
													button.innerHTML = `<svg
														xmlns="http://www.w3.org/2000/svg"
														fill="none"
														viewBox="0 0 24 24"
														stroke-width="1.5"
														stroke="currentColor"
														class="size-6"
													>
  														<path
															stroke-linecap="round"
															stroke-linejoin="round"
															d="m4.5 15.75 7.5-7.5 7.5 7.5"
														/>
													</svg>
													`;
												});
											}
										}
									}
								};
							</script>
						</FadeMove>
					</div>
				</FadeIn>
			</section>
		</main>
		<Footer />
	</BaseBody>
</html>
